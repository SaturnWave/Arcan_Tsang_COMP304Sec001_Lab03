/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package net.skycast.interfaces.weatherbit


import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable

/**
 * 
 *
 * @param cityName City name (closest)
 * @param stateCode State abbreviation
 * @param countryCode Country abbreviation
 * @param timezone Local IANA time zone
 * @param lat Latitude
 * @param lon Longitude
 * @param station Source Station ID
 * @param sources List of data sources used in response
 * @param vis Visibility - default (M)
 * @param rh Relative humidity (%)
 * @param dewpt Dew point temperature - default (C)
 * @param windDir Wind direction (degrees)
 * @param windCdir Cardinal wind direction
 * @param windCdirFull Cardinal wind direction (text)
 * @param windSpeed Wind speed - Default (m/s)
 * @param temp Temperature - Default (C)
 * @param appTemp Apparent temperature - Default (C)
 * @param clouds Cloud cover (%)
 * @param weather 
 * @param datetime Cycle Hour (UTC) of observation
 * @param obTime Full time (UTC) of observation (YYYY-MM-DD HH:MM)
 * @param ts Unix Timestamp
 * @param sunrise Time (UTC) of Sunrise (HH:MM)
 * @param sunset Time (UTC) of Sunset (HH:MM)
 * @param slp Mean sea level pressure in millibars (mb)
 * @param pres Pressure (mb)
 * @param aqi Air quality index (US EPA standard 0 to +500)
 * @param uv UV Index
 * @param solarRad Estimated solar radiation (W/m^2)
 * @param ghi Global horizontal irradiance (W/m^2)
 * @param dni Direct normal irradiance (W/m^2)
 * @param dhi Diffuse horizontal irradiance (W/m^2)
 * @param elevAngle Current solar elevation angle (Degrees)
 * @param pod Part of the day (d = day, n = night)
 * @param precip Precipitation in last hour - Default (mm)
 * @param snow Snowfall in last hour - Default (mm)
 */
@Serializable
data class CurrentObservation (

    /* City name (closest) */
    @SerialName("city_name")
    val cityName: String? = null,

    /* State abbreviation */
    @SerialName("state_code")
    val stateCode: String? = null,

    /* Country abbreviation */
    @SerialName("country_code")
    val countryCode: String? = null,

    /* Local IANA time zone */
    @SerialName("timezone")
    val timezone: String? = null,

    /* Latitude */
    @SerialName("lat")
    val lat: Double? = null,

    /* Longitude */
    @SerialName("lon")
    val lon: Double? = null,

    /* Source Station ID */
    @SerialName("station")
    val station: String? = null,

    /* List of data sources used in response */
    @SerialName("sources")
    val sources: List<String>? = null,

    /* Visibility - default (M) */
    @SerialName("vis")
    val vis: Int? = null,

    /* Relative humidity (%) */
    @SerialName("rh")
    val rh: Int? = null,

    /* Dew point temperature - default (C) */
    @SerialName("dewpt")
    val dewpt: Double? = null,

    /* Wind direction (degrees) */
    @SerialName("wind_dir")
    val windDir: Int? = null,

    /* Cardinal wind direction */
    @SerialName("wind_cdir")
    val windCdir: String? = null,

    /* Cardinal wind direction (text) */
    @SerialName("wind_cdir_full")
    val windCdirFull: String? = null,

    /* Wind speed - Default (m/s) */
    @SerialName("wind_speed")
    val windSpeed: Double? = null,

    /* Temperature - Default (C) */
    @SerialName("temp")
    val temp: Double? = null,

    /* Apparent temperature - Default (C) */
    @SerialName("app_temp")
    val appTemp: Double? = null,

    /* Cloud cover (%) */
    @SerialName("clouds")
    val clouds: Int? = null,

    @SerialName("weather")
    val weather: WeatherConditions? = null,

    /* Cycle Hour (UTC) of observation */
    @SerialName("datetime")
    val datetime: String? = null,

    /* Full time (UTC) of observation (YYYY-MM-DD HH:MM) */
    @SerialName("ob_time")
    val obTime: String? = null,

    /* Unix Timestamp */
    @SerialName("ts")
    val ts: Double? = null,

    /* Time (UTC) of Sunrise (HH:MM) */
    @SerialName("sunrise")
    val sunrise: String? = null,

    /* Time (UTC) of Sunset (HH:MM) */
    @SerialName("sunset")
    val sunset: String? = null,

    /* Mean sea level pressure in millibars (mb) */
    @SerialName("slp")
    val slp: Double? = null,

    /* Pressure (mb) */
    @SerialName("pres")
    val pres: Double? = null,

    /* Air quality index (US EPA standard 0 to +500) */
    @SerialName("aqi")
    val aqi: Double? = null,

    /* UV Index */
    @SerialName("uv")
    val uv: Double? = null,

    /* Estimated solar radiation (W/m^2) */
    @SerialName("solar_rad")
    val solarRad: Double? = null,

    /* Global horizontal irradiance (W/m^2) */
    @SerialName("ghi")
    val ghi: Double? = null,

    /* Direct normal irradiance (W/m^2) */
    @SerialName("dni")
    val dni: Double? = null,

    /* Diffuse horizontal irradiance (W/m^2) */
    @SerialName("dhi")
    val dhi: Double? = null,

    /* Current solar elevation angle (Degrees) */
    @SerialName("elev_angle")
    val elevAngle: Double? = null,

    /* Part of the day (d = day, n = night) */
    @SerialName("pod")
    val pod: String? = null,

    /* Precipitation in last hour - Default (mm) */
    @SerialName("precip")
    val precip: Double? = null,

    /* Snowfall in last hour - Default (mm) */
    @SerialName("snow")
    val snow: Double? = null

) {


}

